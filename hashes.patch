diff --git a/Cargo.lock b/Cargo.lock
deleted file mode 100644
index ac916cb..0000000
--- a/Cargo.lock
+++ /dev/null
@@ -1,337 +0,0 @@
-# This file is automatically @generated by Cargo.
-# It is not intended for manual editing.
-[[package]]
-name = "blake2"
-version = "0.9.1"
-dependencies = [
- "crypto-mac",
- "digest",
- "hex-literal",
- "opaque-debug",
-]
-
-[[package]]
-name = "blobby"
-version = "0.1.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6fe5f8c2940b65859ece4b3b2ba02d2b12c87cab455fd42dee2556a187bb2cf6"
-dependencies = [
- "byteorder",
-]
-
-[[package]]
-name = "block-buffer"
-version = "0.9.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4"
-dependencies = [
- "block-padding",
- "generic-array",
-]
-
-[[package]]
-name = "block-padding"
-version = "0.2.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c98bfd7c112b6399fef97cc0614af1cd375b27a112e552ce60f94c1b5f13cb74"
-
-[[package]]
-name = "byteorder"
-version = "1.3.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "08c48aae112d48ed9f069b33538ea9e3e90aa263cfa3d1c24309612b1f7472de"
-
-[[package]]
-name = "cc"
-version = "1.0.58"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f9a06fb2e53271d7c279ec1efea6ab691c35a2ae67ec0d91d7acec0caf13b518"
-
-[[package]]
-name = "cfg-if"
-version = "1.0.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"
-
-[[package]]
-name = "cpuid-bool"
-version = "0.1.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8aebca1129a03dc6dc2b127edd729435bbc4a37e1d5f4d7513165089ceb02634"
-
-[[package]]
-name = "crypto-mac"
-version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b584a330336237c1eecd3e94266efb216c56ed91225d634cb2991c5f3fd1aeab"
-dependencies = [
- "blobby",
- "generic-array",
- "subtle",
-]
-
-[[package]]
-name = "digest"
-version = "0.9.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066"
-dependencies = [
- "blobby",
- "generic-array",
-]
-
-[[package]]
-name = "generic-array"
-version = "0.14.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "501466ecc8a30d1d3b7fc9229b122b2ce8ed6e9d9223f1138d4babb253e51817"
-dependencies = [
- "typenum",
- "version_check",
-]
-
-[[package]]
-name = "gost94"
-version = "0.9.0"
-dependencies = [
- "block-buffer",
- "digest",
- "hex-literal",
- "opaque-debug",
-]
-
-[[package]]
-name = "groestl"
-version = "0.9.0"
-dependencies = [
- "block-buffer",
- "digest",
- "hex-literal",
- "opaque-debug",
-]
-
-[[package]]
-name = "hex-literal"
-version = "0.2.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "961de220ec9a91af2e1e5bd80d02109155695e516771762381ef8581317066e0"
-dependencies = [
- "hex-literal-impl",
- "proc-macro-hack",
-]
-
-[[package]]
-name = "hex-literal-impl"
-version = "0.2.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "853f769599eb31de176303197b7ba4973299c38c7a7604a6bc88c3eef05b9b46"
-dependencies = [
- "proc-macro-hack",
-]
-
-[[package]]
-name = "k12"
-version = "0.1.0"
-dependencies = [
- "digest",
- "hex-literal",
-]
-
-[[package]]
-name = "keccak"
-version = "0.1.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "67c21572b4949434e4fc1e1978b99c5f77064153c59d998bf13ecd96fb5ecba7"
-
-[[package]]
-name = "libc"
-version = "0.2.79"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2448f6066e80e3bfc792e9c98bf705b4b0fc6e8ef5b43e5889aff0eaa9c58743"
-
-[[package]]
-name = "md-5"
-version = "0.9.1"
-dependencies = [
- "block-buffer",
- "digest",
- "hex-literal",
- "md5-asm",
- "opaque-debug",
-]
-
-[[package]]
-name = "md2"
-version = "0.9.0"
-dependencies = [
- "block-buffer",
- "digest",
- "hex-literal",
- "opaque-debug",
-]
-
-[[package]]
-name = "md4"
-version = "0.9.0"
-dependencies = [
- "block-buffer",
- "digest",
- "hex-literal",
- "opaque-debug",
-]
-
-[[package]]
-name = "md5-asm"
-version = "0.4.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3b47e5a1261ecd6ba951d1ad392534743310e513ef1e2609023368798829f33e"
-dependencies = [
- "cc",
-]
-
-[[package]]
-name = "opaque-debug"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "624a8340c38c1b80fd549087862da4ba43e08858af025b236e509b6649fc13d5"
-
-[[package]]
-name = "proc-macro-hack"
-version = "0.5.18"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "99c605b9a0adc77b7211c6b1f722dcb613d68d66859a44f3d485a6da332b0598"
-
-[[package]]
-name = "ripemd160"
-version = "0.9.1"
-dependencies = [
- "block-buffer",
- "digest",
- "hex-literal",
- "opaque-debug",
-]
-
-[[package]]
-name = "ripemd320"
-version = "0.9.0"
-dependencies = [
- "block-buffer",
- "digest",
- "hex-literal",
- "opaque-debug",
-]
-
-[[package]]
-name = "sha-1"
-version = "0.9.1"
-dependencies = [
- "block-buffer",
- "cfg-if",
- "cpuid-bool",
- "digest",
- "hex-literal",
- "libc",
- "opaque-debug",
- "sha1-asm",
-]
-
-[[package]]
-name = "sha1-asm"
-version = "0.4.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b9dae2289dd5f5dc67fb0f341a5676c5c197415c51ce7345ae1bd0d36a6cbbfc"
-dependencies = [
- "cc",
-]
-
-[[package]]
-name = "sha2"
-version = "0.9.1"
-dependencies = [
- "block-buffer",
- "cfg-if",
- "cpuid-bool",
- "digest",
- "hex-literal",
- "libc",
- "opaque-debug",
- "sha2-asm",
-]
-
-[[package]]
-name = "sha2-asm"
-version = "0.5.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "92cfa120723b595090343400d71e4921ba4fbc7d0d48718d72c20b3348469678"
-dependencies = [
- "cc",
-]
-
-[[package]]
-name = "sha3"
-version = "0.9.1"
-dependencies = [
- "block-buffer",
- "digest",
- "hex-literal",
- "keccak",
- "opaque-debug",
-]
-
-[[package]]
-name = "shabal"
-version = "0.3.0"
-dependencies = [
- "block-buffer",
- "digest",
- "hex-literal",
- "opaque-debug",
-]
-
-[[package]]
-name = "streebog"
-version = "0.9.2"
-dependencies = [
- "block-buffer",
- "digest",
- "hex-literal",
- "opaque-debug",
-]
-
-[[package]]
-name = "subtle"
-version = "2.2.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "502d53007c02d7605a05df1c1a73ee436952781653da5d0bf57ad608f66932c1"
-
-[[package]]
-name = "typenum"
-version = "1.12.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "373c8a200f9e67a0c95e62a4f52fbf80c23b4381c05a17845531982fa99e6b33"
-
-[[package]]
-name = "version_check"
-version = "0.9.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b5a972e5669d67ba988ce3dc826706fb0a8b01471c088cb0b6110b805cc36aed"
-
-[[package]]
-name = "whirlpool"
-version = "0.9.0"
-dependencies = [
- "block-buffer",
- "digest",
- "hex-literal",
- "opaque-debug",
- "whirlpool-asm",
-]
-
-[[package]]
-name = "whirlpool-asm"
-version = "0.5.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cbb23be8b0dec6fafef14563c42ec98bbfc33f2a97ed5bc99cd8b50ea5c68097"
-dependencies = [
- "cc",
-]
diff --git a/Cargo.toml b/Cargo.toml
deleted file mode 100644
index 7867526..0000000
--- a/Cargo.toml
+++ /dev/null
@@ -1,21 +0,0 @@
-[workspace]
-members = [
-    "blake2",
-    "gost94",
-    "groestl",
-    "k12",
-    "md2",
-    "md4",
-    "md5",
-    "ripemd160",
-    "ripemd320",
-    "sha1",
-    "sha2",
-    "sha3",
-    "shabal",
-    "streebog",
-    "whirlpool",
-]
-
-[profile.dev]
-opt-level = 2
diff --git a/blake2/Cargo.toml b/blake2/Cargo.toml
index 57d276b..c9b1c14 100644
--- a/blake2/Cargo.toml
+++ b/blake2/Cargo.toml
@@ -15,6 +15,7 @@ categories = ["cryptography", "no-std"]
 digest = "0.9"
 crypto-mac = "0.8"
 opaque-debug = "0.3"
+rlibc = "1.0"
 
 [dev-dependencies]
 digest = { version = "0.9", features = ["dev"] }
diff --git a/blake2/src/blake2.rs b/blake2/src/blake2.rs
index 4091365..1521c31 100644
--- a/blake2/src/blake2.rs
+++ b/blake2/src/blake2.rs
@@ -22,6 +22,7 @@ macro_rules! blake2_impl {
         pub struct $state {
             m: [$word; 16],
             h: [$vec; 2],
+            v: [$vec; 4],
             t: u64,
             n: usize,
 
@@ -73,16 +74,63 @@ macro_rules! blake2_impl {
         }
 
         impl $state {
+            #[inline(always)]
+            #[doc(hidden)]
+            pub const fn empty() -> Self {
+                let output_size = $bytes::USIZE;
+                let kk = 0;
+
+                let mut p = [0 as $word; 8];
+                p[0] = 0x0101_0000 ^ ((kk as $word) << 8) ^
+                    (output_size as $word);
+
+                p[4] = 0;
+                p[5] = 0;
+                p[6] = 0;
+                p[7] = 0;
+
+                let mut state = {
+                    let nn = p[0] as u8 as usize;
+    
+                    let h0 = [
+                        $vec::new($IV[0] ^ p[0], $IV[1] ^ p[1], $IV[2] ^ p[2], $IV[3] ^ p[3]),
+                        $vec::new($IV[4] ^ p[4], $IV[5] ^ p[5], $IV[6] ^ p[6], $IV[7] ^ p[7]),
+                    ];
+    
+                    $state {
+                        m: [0; 16],
+                        h: h0,
+                        v: [$vec::new(0, 0, 0, 0), $vec::new(0, 0, 0, 0), $vec::new(0, 0, 0, 0), $vec::new(0, 0, 0, 0)],
+                        t: 0,
+                        n: nn,
+    
+                        t0: 0,
+                        m0: [0; 16],
+                        h0,
+                    }    
+                };
+
+                if kk > 0 {
+                    state.t = 2 * ($bytes::USIZE as u64);
+                }
+
+                state.t0 = state.t;
+                state.m0 = state.m;
+                state
+            }
+
             /// Creates a new hashing context with a key.
             ///
             /// **WARNING!** If you plan to use it for variable output MAC, then
             /// make sure to compare codes in constant time! It can be done
             /// for example by using `subtle` crate.
+            #[inline(always)]
             pub fn new_keyed(key: &[u8], output_size: usize) -> Self {
                 Self::with_params(key, &[], &[], output_size)
             }
 
             /// Creates a new hashing context with the full set of sequential-mode parameters.
+            #[inline(always)]
             pub fn with_params(key: &[u8], salt: &[u8], persona: &[u8], output_size: usize) -> Self {
                 let kk = key.len();
                 assert!(kk <= $bytes::to_usize());
@@ -137,6 +185,7 @@ macro_rules! blake2_impl {
             }
 
             #[doc(hidden)]
+            #[inline(always)]
             pub fn with_parameter_block(p: &[$word; 8]) -> Self {
                 let nn = p[0] as u8 as usize;
                 let kk = (p[0] >> 8) as u8 as usize;
@@ -151,6 +200,7 @@ macro_rules! blake2_impl {
                 $state {
                     m: [0; 16],
                     h: h0,
+                    v: [$vec::new(0, 0, 0, 0), $vec::new(0, 0, 0, 0), $vec::new(0, 0, 0, 0), $vec::new(0, 0, 0, 0)],
                     t: 0,
                     n: nn,
 
@@ -161,6 +211,7 @@ macro_rules! blake2_impl {
             }
 
             /// Updates the hashing context with more data.
+            #[inline(always)]
             fn update(&mut self, data: &[u8]) {
                 let mut rest = data;
 
@@ -200,11 +251,13 @@ macro_rules! blake2_impl {
             }
 
             #[doc(hidden)]
+            #[inline(always)]
             pub fn finalize_last_node(mut self) -> Output {
                 self.finalize_with_flag(!0)
             }
 
 
+            #[inline(always)]
             fn finalize_with_flag(&mut self, f1: $word) -> Output {
                 let off = self.t as usize % (2 * $bytes::to_usize());
                 if off != 0 {
@@ -220,6 +273,7 @@ macro_rules! blake2_impl {
                 out
             }
 
+            #[inline(always)]
             fn compress(&mut self, f0: $word, f1: $word) {
                 use $crate::consts::SIGMA;
 
@@ -233,30 +287,30 @@ macro_rules! blake2_impl {
                     _  => unreachable!(),
                 };
 
-                let mut v = [
+                self.v = [
                     h[0],
                     h[1],
                     iv0(),
                     iv1() ^ $vec::new(t0, t1, f0, f1),
                 ];
 
-                round(&mut v, m, &SIGMA[0]);
-                round(&mut v, m, &SIGMA[1]);
-                round(&mut v, m, &SIGMA[2]);
-                round(&mut v, m, &SIGMA[3]);
-                round(&mut v, m, &SIGMA[4]);
-                round(&mut v, m, &SIGMA[5]);
-                round(&mut v, m, &SIGMA[6]);
-                round(&mut v, m, &SIGMA[7]);
-                round(&mut v, m, &SIGMA[8]);
-                round(&mut v, m, &SIGMA[9]);
+                round(&mut self.v, m, &SIGMA[0]);
+                round(&mut self.v, m, &SIGMA[1]);
+                round(&mut self.v, m, &SIGMA[2]);
+                round(&mut self.v, m, &SIGMA[3]);
+                round(&mut self.v, m, &SIGMA[4]);
+                round(&mut self.v, m, &SIGMA[5]);
+                round(&mut self.v, m, &SIGMA[6]);
+                round(&mut self.v, m, &SIGMA[7]);
+                round(&mut self.v, m, &SIGMA[8]);
+                round(&mut self.v, m, &SIGMA[9]);
                 if $bytes::to_u8() == 64 {
-                    round(&mut v, m, &SIGMA[0]);
-                    round(&mut v, m, &SIGMA[1]);
+                    round(&mut self.v, m, &SIGMA[0]);
+                    round(&mut self.v, m, &SIGMA[1]);
                 }
 
-                h[0] = h[0] ^ (v[0] ^ v[2]);
-                h[1] = h[1] ^ (v[1] ^ v[3]);
+                h[0] = h[0] ^ (self.v[0] ^ self.v[2]);
+                h[1] = h[1] ^ (self.v[1] ^ self.v[3]);
             }
         }
 
@@ -313,10 +367,17 @@ macro_rules! blake2_impl {
 
         impl $fix_state {
             /// Creates a new hashing context with the full set of sequential-mode parameters.
+            #[inline(always)]
             pub fn with_params(key: &[u8], salt: &[u8], persona: &[u8]) -> Self {
                 let state = $state::with_params(key, salt, persona, $bytes::to_usize());
                 Self { state }
             }
+
+            #[inline(always)]
+            #[doc(hidden)]
+            pub const fn empty() -> Self {
+                Self { state: $state::empty() }
+            }
         }
 
         impl Default for $fix_state {
diff --git a/blake2/src/consts.rs b/blake2/src/consts.rs
index ab76c0e..c73d6f4 100644
--- a/blake2/src/consts.rs
+++ b/blake2/src/consts.rs
@@ -15,7 +15,7 @@ pub static SIGMA: [[usize; 16]; 12] = [
     [14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3],
 ];
 
-pub static BLAKE2B_IV: [u64; 8] = [
+pub const BLAKE2B_IV: [u64; 8] = [
     0x6a09e667f3bcc908,
     0xbb67ae8584caa73b,
     0x3c6ef372fe94f82b,
@@ -34,7 +34,7 @@ pub const BLAKE2B_SALTBYTES : usize = 16;
 pub const BLAKE2B_PERSONALBYTES : usize = 16;
 */
 
-pub static BLAKE2S_IV: [u32; 8] = [
+pub const BLAKE2S_IV: [u32; 8] = [
     0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19,
 ];
 
diff --git a/blake2/src/lib.rs b/blake2/src/lib.rs
index 28cb1d9..dbdff1f 100644
--- a/blake2/src/lib.rs
+++ b/blake2/src/lib.rs
@@ -90,6 +90,8 @@
 #![cfg_attr(feature = "simd", feature(platform_intrinsics, repr_simd))]
 #![cfg_attr(feature = "simd_asm", feature(asm))]
 
+#![no_builtins]
+
 #[cfg(feature = "std")]
 extern crate std;
 
diff --git a/blake2/src/simd/simdty.rs b/blake2/src/simd/simdty.rs
index 008b8b4..384857b 100644
--- a/blake2/src/simd/simdty.rs
+++ b/blake2/src/simd/simdty.rs
@@ -65,7 +65,7 @@ pub type u8x32 = Simd32<u8>;
 
 impl<T> Simd4<T> {
     #[inline(always)]
-    pub fn new(e0: T, e1: T, e2: T, e3: T) -> Simd4<T> {
+    pub const fn new(e0: T, e1: T, e2: T, e3: T) -> Simd4<T> {
         Simd4(e0, e1, e2, e3)
     }
 }
